---

title: Understand OPC UA Write
description: Learn how to use OPC UA Write (Preview) to send data to industrial assets at the edge using the OPC UA Connector
author: simonaarsene
ms.author: simonaarsene
#ms.subservice:
ms.topic: concept-article
ms.date: 06/30/2025

# CustomerIntent: As an industrial edge developer or operations engineer, I want to understand how to use OPC UA Write to send data to OPC UA assets for process control and integration.
---

# Introduction

OPC UA Write (Preview) empowers industrial developers and operations engineers to perform real-time control at the edge by writing values directly to OPC UA nodes. 
This capability enables immediate updates to configurations, triggers for automation, and dynamic process adjustments—without relying on cloud round-trips.

It is especially useful in scenarios where latency, autonomy, or local decision-making is critical, such as in manufacturing lines, predictive maintenance, or AI-driven control loops.


# Writing Data to OPC UA Assets

Once an asset is deployed, you can use the OPC UA Connector to perform write operations directly to the asset’s OPC UA server, by leveraging remote MQTT calls. 
When an MQTT request is received, the OPC UA Connector dynamically creates an ad-hoc session using the asset’s AssetEndpointProfile (AEP). 
During this session, it performs strict validation to ensure that the write payload only includes data points defined in the target dataset. 
Once validated, the Commander executes the write operation, updating the specified nodes on the OPC UA asset. 
Each MQTT message includes Message Metadata that defines system-level and user-defined properties—such as SourceId, ProtocolVersion, and CorrelationData—to ensure traceability and conformance.

The OPC UA Connector subscribes to the topic:
{AioNamespace}/asset-operations/{AssetId}/{DatasetName}/
When a write request is received, the OPC UA Connector:

- Creates an ad-hoc session using the asset’s AssetEndpointProfile (AEP).
- Validates the payload to ensure all data points exist within the defined dataset.
- Executes the write by sending the values to the OPC UA Server, which updates the target nodes and returns a success or failure response.


# How It Works
1. Asset Setup: Deploy the asset and define its AssetEndpointProfile (AEP) in the Azure Device Registry.
2. Write Request: Send a JSON payload to the MQTT topic with the dataset name and values to be written.
3. Session Creation: OPC UA Connector creates a temporary session using the AEP.
4. Validation: The payload is checked to ensure all data points exist in the dataset.
5. Execution: The values are written to the OPC UA server, and a response is returned.


# Sample Write Payload

Here’s a minimal example for writing a simple float value to a node:

{
  "method": "Write",
  "params": {
    "dataset": "TemperatureData",
    "values": {
      "SetPoint": 50.0
    }
  },
  "metadata": {
    "sourceId": "opcua-connector-01",
    "protocolVersion": "1.0",
    "correlationData": "b7f3a9e2-4c3d-4e9a-9f3a-2d1c6e7f9a3b"
  }
}

# Step-by-Step Guide

# Define the Asset and Dataset

In your asset configuration (YAML or JSON), define the dataset and endpoint profile:


Replace asset123, myNamespace, and aio-mqtt-broker.mynamespace.svc.cluster.local with your actual values.

assetId: asset123
endpointProfile:
  endpointUrl: "opc.tcp://192.168.1.100:4840"
  securityPolicy: "Basic256Sha256"
  userTokenType: "Username"
  username: "operator"
  password: "securePassword"
datasets:
  - name: TemperatureData
    datapoints:
      - name: SetPoint
        nodeId: "ns=2;s=Machine/Temperature/SetPoint"
        dataType: "Double"

# Prepare the Write Payload
Create a file named payload.json with the following content
{
  "method": "Write",
  "params": {
    "dataset": "TemperatureData",
    "values": {
      "SetPoint": 50.0
    }
  },
  "metadata": {
    "sourceId": "opcua-connector-01",
    "protocolVersion": "1.0",
    "correlationData": "b7f3a9e2-4c3d-4e9a-9f3a-2d1c6e7f9a3b"
  }
}


# Publish the Payload to Azure IoT Operations MQTT Broker
Use a containerized MQTT client or a custom app to publish the payload

kubectl exec -n mynamespace mqtt-client -- \
  mqtt pub \
  --host aio-mqtt-broker.mynamespace.svc.cluster.local \
  --port 1883 \
  --topic "myNamespace/asset-operations/asset123/TemperatureData/" \
  --file /data/payload.json

Mount payload.json into the pod at /data/payload.json using a ConfigMap or volume.

Ensure the topic matches the format:\
{AioNamespace}/asset-operations/{AssetId}/{DatasetName}/


# Monitor the Response
Subscribe to the same topic to receive the response:

kubectl exec -n mynamespace mqtt-client -- \
  mqtt sub \
  --host aio-mqtt-broker.mynamespace.svc.cluster.local \
  --port 1883 \
  --topic "myNamespace/asset-operations/asset123/TemperatureData/"

Expected response:
{
  "status": "Success",
  "message": "Write operation completed",
  "timestamp": " "
}


# Verify the Write
Use an OPC UA client 
- Connect to the asset’s endpoint URL.
- Browse to the node ns=2;s=Machine/Temperature/SetPoint.
- Confirm that the value has been updated to 50.0.



